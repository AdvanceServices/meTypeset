*** Settings ***
Documentation     This series of test cases evaluates the basic environment setup and the ability to parse basic documents.
Library           Process
Library           OperatingSystem
Library           XML
Library           Collections

*** Test Cases ***
000 Environment
    ${result} =    Run Process    python ../bin/meTypeset.py docx 001.docx ./000 -d    shell=True
    Log    ${result.stdout}
    Log    ${result.stderr}
    Should Not Contain    ${result.stderr}    cannot find or open
    Should Not Contain    ${result.stdout}    ERROR
    [Teardown]    Remove Directory    000    recursive=True

001 Basic paragraph
    ${result} =    Run Process    python ../bin/meTypeset.py docx 001.docx ./001 -d    shell=True
    Log    ${result.stdout}
    Log    ${result.stderr}
    ${xml}=    Parse XML    ./001/nlm/out.xml
    ${paragraph}=    Get Element    ${xml}    body/sec/p
    Elements Should Match    ${paragraph}    <p>The most basic document possible.</p>
    [Teardown]    Remove Directory    001    recursive=True

002 Basic paragraph with italics
    [Tags]    italic    002    formatting
    ${result} =    Run Process    python ../bin/meTypeset.py docx 002.docx ./002 -d    shell=True
    Log    ${result.stdout}
    Log    ${result.stderr}
    ${xml}=    Parse XML    ./002/nlm/out.xml
    ${paragraph}=    Get Element    ${xml}    body/sec/p
    Elements Should Match    ${paragraph}    <p>A document <italic>with</italic> an italic word.</p>
    [Teardown]    Remove Directory    002    recursive=True

003 Basic paragraph with bold
    [Tags]    bold    002    formatting
    ${result} =    Run Process    python ../bin/meTypeset.py docx 003.docx ./003 -d    shell=True
    Log    ${result.stdout}
    Log    ${result.stderr}
    ${xml}=    Parse XML    ./003/nlm/out.xml
    ${paragraph}=    Get Element    ${xml}    body/sec/p
    Elements Should Match    ${paragraph}    <p>A document <bold>with</bold> a bold word.</p>
    [Teardown]    Remove Directory    003    recursive=True

004 Metadata merge
    [Tags]    metadata    004
    ${result} =    Run Process    python ../bin/meTypeset.py docx 002.docx ./004 -d    shell=True
    Log    ${result.stdout}
    Log    ${result.stderr}
    ${xml}=    Parse XML    ./004/nlm/out.xml
    ${journalid}=    Get Element    ${xml}    front/journal-meta/journal-id
    Elements Should Match    ${journalid}    <journal-id journal-id-type="publisher-id">The Journal Name</journal-id>
    ${issn}=    Get Element    ${xml}    front/journal-meta/issn
    Elements Should Match    ${issn}    <issn pub-type="epub">0000-000X</issn>
    ${doi}=    Get Element    ${xml}    front/article-meta/article-id[@pub-id-type="doi"]
    Elements Should Match    ${doi}    <article-id pub-id-type="doi">10.1000/123456</article-id>
    ${title}=    Get Element    ${xml}    front/article-meta/title-group/article-title
    Elements Should Match    ${title}    <article-title>A Sample Article Title</article-title>
    ${firstname}=    Get Element    ${xml}    front/article-meta/contrib-group/contrib/name/given-names
    Elements Should Match    ${firstname}    <given-names>Martin Paul</given-names>
    ${surname}=    Get Element    ${xml}    front/article-meta/contrib-group/contrib/name/surname
    Elements Should Match    ${surname}    <surname>Eve</surname>
    ${aff}=    Get Element    ${xml}    front/article-meta/aff
    Elements Should Match    ${aff}    <aff>University of Lincoln</aff>
    ${year}=    Get Element    ${xml}    front/article-meta/pub-date/year
    Elements Should Match    ${year}    <year>2013</year>
    ${volume}=    Get Element    ${xml}    front/article-meta/volume
    Elements Should Match    ${volume}    <volume>1</volume>
    ${issue}=    Get Element    ${xml}    front/article-meta/issue
    Elements Should Match    ${issue}    <issue>1</issue>
    ${copyright}=    Get Element    ${xml}    front/article-meta/permissions/copyright-statement
    Elements Should Match    ${copyright}    <copyright-statement>Copyright Â© 2013, Martin Paul Eve</copyright-statement>
    ${license}=    Get Element    ${xml}    front/article-meta/permissions/license/license-p
    Elements Should Match    ${license}    <license-p>This is an open-access article distributed under the terms of the Creative Commons Attribution License, which permits unrestricted use, distribution, and reproduction in any medium, provided the original work is properly cited. The citation of this article must include: the name(s) of the authors, the name of the journal, the full URL of the article (in a hyperlinked format if distributed online) and the DOI number of the article.</license-p>
    ${uri}=    Get Element    ${xml}    front/article-meta/self-uri
    Elements Should Match    ${uri}    <self-uri>https://www.martineve.com/</self-uri>
    ${abstract}=    Get Element    ${xml}    front/article-meta/abstract/p
    Elements Should Match    ${abstract}    <p>This is a sample abstract that forms part of the metadataSample.xml file in meTypeset.</p>
    [Teardown]    Remove Directory    004    recursive=True

005 Title, non-title, title (from bolded text)
    [Tags]    formatting    bold    title    005
    ${result} =    Run Process    python ../bin/meTypeset.py docx 005.docx ./005 -d    shell=True
    Log    ${result.stdout}
    Log    ${result.stderr}
    ${xml}=    Parse XML    ./005/nlm/out.xml
    ${body}=    Get Element    ${xml}    body
    Elements Should Match    ${body}    <body><sec><title>This should be treated as a title.</title><p>This shouldn't.</p></sec><sec><title>This should.</title></sec></body>    normalize_whitespace=yes
    [Teardown]    Remove Directory    005    recursive=True

006 Basic footnote test
    [Tags]    formatting    footnotes    006
    ${result} =    Run Process    python ../bin/meTypeset.py docx Footnote.docx ./006 -d    shell=True
    Log    ${result.stdout}
    Log    ${result.stderr}
    ${xml}=    Parse XML    ./006/nlm/out.xml
    ${p}=    Get Element    ${xml}    body/sec/p
    Elements Should Match    ${p}    <p>A footnote test.<xref ref-type="fn" rid="bibd2e35"/></p>    normalize_whitespace=yes
    ${fng}=    Get Element    ${xml}    back/fn-group
    Elements Should Match    ${fng}    <fn-group><fn id="bibd2e35"><p>Footnote.</p></fn></fn-group>    normalize_whitespace=yes
    [Teardown]    Remove Directory    006    recursive=True

007 Complex link test
    [Tags]    formatting    complexlink    007
    ${result} =    Run Process    python ../bin/meTypeset.py docxextracted ./ComplexLink ./007 -d    shell=True
    Log    ${result.stdout}
    Log    ${result.stderr}
    ${xml}=    Parse XML    ./007/nlm/out.xml
    ${p}=    Get Element    ${xml}    body/sec/p/ext-link
    ${attr1}=    Get Element Attribute    ${p}    {http://www.w3.org/1999/xlink}href
    Should Be Equal    ${attr1}    http://www.medscape.com/content/2003/00/45/63/456300/456300_tab.html
    Should Be Equal As Strings    ${p.text}    "Table 1."
    [Teardown]    Remove Directory    007    recursive=True
